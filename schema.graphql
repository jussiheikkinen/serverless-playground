"""

query GetRecords {
  records(genre: "pop") {
   	name
  }
}

query GetRecordsOfficial {
  records_official(genre: "pop") {
   	name
    something
  }
}

query GetRecordsOfficial {
  records_official(genre: "pop") {
   	name
    something

    # proof that the type resolved dynamically
    thisRecord {
      name
      thisRecord {
        name
      }
    }
  }
}

"""

interface Node {
    id: ID!
}

schema {
    query: Query
    mutation: Mutation
}

type Query {
    node(id: ID!): Node
    records(genre: String): [Record]
    records_official(genre: String): [RecordOfficial]
    artists: [Artist]
}

type Mutation {
    deleteRecord(id: ID): Boolean
}

"""
A music record
"""
type Record implements Node {
    id: ID!
    name: String
    artist: Artist
    coverArt: String
    timestamp: Int
}

"""
Same as Record but with type resolver
"""
type RecordOfficial implements Node {
    id: ID!
    name: String
    artist: Artist
    coverArt: String
    timestamp: Int
    thisRecord: RecordOfficial

    # Example field that is not in data provided to type resolver
    something: String
}

"""
The creator of a record
"""
type Artist implements Node {
    id: ID!
    name: String
    members: [Person]
}

"""
A person. In this case a band member
"""
type Person {
    name: String
    birthday: Int
    instruments: [Instrument]
}

"""
A musical instrument
"""
type Instrument {
    name: String
}

